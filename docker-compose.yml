version: '3.8'

services:
  flask-file-server:
    build: .
    container_name: flask-file-server
    ports:
      - "5000:5000"
    volumes:
      # 文件存储卷 - 持久化文件数据
      - ./files:/app/files
      # 可选：挂载配置文件
      # - ./.env:/app/.env
    environment:
      # Flask配置
      - FLASK_ENV=production
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      # 文件上传配置
      - UPLOAD_FOLDER=/app/files
      - MAX_CONTENT_LENGTH=104857600  # 100MB
      - ALLOWED_EXTENSIONS=txt,pdf,png,jpg,jpeg,gif,doc,docx,xls,xlsx,zip,rar
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - file-server-network

  # 可选：添加nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: flask-file-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # SSL证书（如果需要HTTPS）
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - flask-file-server
    restart: unless-stopped
    networks:
      - file-server-network
    # 取消注释以启用nginx
    profiles:
      - nginx

  # 可选：添加监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: flask-file-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - file-server-network
    # 取消注释以启用监控
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: flask-file-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - file-server-network
    # 取消注释以启用监控
    profiles:
      - monitoring

networks:
  file-server-network:
    driver: bridge
    name: flask-file-server-network

volumes:
  grafana-data:
    driver: local

# 使用说明：
# 
# 基本启动：
# docker-compose up -d
# 
# 启动带nginx反向代理：
# docker-compose --profile nginx up -d
# 
# 启动带监控服务：
# docker-compose --profile monitoring up -d
# 
# 启动所有服务：
# docker-compose --profile nginx --profile monitoring up -d
# 
# 查看日志：
# docker-compose logs -f flask-file-server
# 
# 停止服务：
# docker-compose down
# 
# 完全清理（包括卷）：
# docker-compose down -v